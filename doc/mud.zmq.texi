@node mud.zmq
@section mud.zmq

The @code{mud.zmq} table has functions for commmunication with external
programs, via the ZeroMQ messaging library. The server maintains an
internal ZeroMQ context and user code can create sockets registered to
that context. Lua code may also arrange to be notified when a socket's
state changes (becomes readable or writeable). The interface is inspired
by lua-zmq (@code{http://TODO}), but has been changed to integrate with
mudcore's event loop.

@defun mud.zmq.socket (@var{type})
Create and return a ZeroMQ socket. @var{type} is one of the following
constants:
@itemize
@item @code{mud.zmq.REQ}
@item @code{mud.zmq.REP}
@item @code{mud.zmq.DEALER}
@item @code{mud.zmq.ROUTER}
@item @code{mud.zmq.PUB}
@item @code{mud.zmq.SUB}
@item @code{mud.zmq.PUSH}
@item @code{mud.zmq.PULL}
@item @code{mud.zmq.PAIR}
@end itemize

The returned socket is a Lua userdatum with type
@code{mudcore.zmq_socket}.
@end defun

@defun mud.zmq.version ()
Return a table @code{@{MAJOR, MINOR, PATCHLEVEL@}} corresponding to the
ZeroMQ version.
@end defun

@defmethod mudcore.zmq_socket bind (@var{endpoint})
Bind the socket to @var{endpoint}.
@end defmethod

@defmethod mudcore.zmq_socket close ()
Close the socket.
@end defmethod

@defmethod mudcore.zmq_socket connect (@var{endpoint})
Connect the socket to @var{endpoint}.
@end defmethod

@defmethod mudcore.zmq_socket send (@var{msg}, @var{flags} = 0)
Send @var{msg} (a string, or convertible to a string) on the
socket. @var{flags} is a combination of the following flags:
@itemize
@item @code{mud.zmq.NOBLOCK}
@item @code{mud.zmq.SNDMORE}
@end itemize
@end defmethod
