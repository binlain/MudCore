\input texinfo @c -*- texinfo -*-
@c %**start of header
@setfilename mudcore.info
@settitle MudCore Reference Manual, Version @value{VERSION}
@c %**end of header

@include version.texi

@copying
This manual is for MudCore, version @value{VERSION}.

Copyright @copyright{} 2011 Jack Kelly.

@quotation
TODO licence text
@end quotation
@end copying

@titlepage
@title MudCore Reference Manual, Version @value{VERSION}
@author Jack Kelly

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top MudCore Reference Manual

This manual is for MudCore, version @value{VERSION}.
@end ifnottex

@menu
* Invocation::                  What goes on the command-line.
* Lua Reference::               Functions available to Lua code.
* C Reference::                 Autogenerated documentation for C functions.
@end menu

@node Invocation
@chapter Invocation

Running @code{mudcore} starts the mud. Log files are written to
@code{./log}. Once sockets are opened, the Lua interpreter is started
and @code{./boot.lua} is run. Control is then handed to the main loop.

The following options modify the behaviour of the server:
@table @samp
@item -(no-)file-logging
(Dis)able logging to files.

@item -log-level=@{debug,info,warn,error,fatal@}
Set the logging level.

@item -port=PORT
Set the port for the mud's main socket.

@item -pulse-length=LENGTH
Override the MUD's default pulse length (100 milliseconds). This value
is given in microseconds.

@item -zmq-io-threads
Override the number of I/O threads used by ZeroMQ. You may want to
increase this from its default of 1 if you're using a lot of ZeroMQ
sockets, or set it to 0 if you aren't using ZeroMQ at all.

@item -zmq-pub-endpoint=ENDPOINT
Set the ZeroMQ endpoint for the @code{ZMQ_PUB} socket.

@item -zmq-rep-endpoint=ENDPOINT
Set the ZeroMQ endpoint for the @code{ZMQ_REP} socket.

All command-line arguments are available to Lua code. @xref{mud.args}.
@end table

@node Lua Reference
@chapter Lua reference

This chapter details the functions available to Lua code. All functions
are accessed through the global @code{mud} table.

@defun mud.shutdown ()
Shut down the mud.
@end defun

@menu
* mud.args::                    Access the command-line arguments.
* mud.descriptor::              Socket (descriptor) operations.
* mud.log::                     Logging facility.
* mud.timer::                   Set functions to be called in the future.
* mud.zmq::                     Communicate with external programs using ZeroMQ.
@end menu

@include mud.args.texi
@include mud.descriptor.texi
@include mud.log.texi
@include mud.timer.texi
@include mud.zmq.texi

@node C Reference
@chapter C Reference
This chapter contains autogenerated documentation extracted from each C
header.

@menu
* arg_parse.h::                 Argument parsing.
* buffer.h::                    Circular buffers.
* descriptor.h::                Encapsulated FDs for telnet clients.
* io.h::                        Main input/output routines.
* log.h::                       Logging facility.
* lua_api.h::                   Lua API.
* lua_args.h::                  Lua command-line arguments.
* lua_descriptor.h::            Socket operations for Lua code.
* lua_log.h::                   Logging from Lua code.
* lua_zmq.h::                   Using ZeroMQ from Lua code.
* options.h::                   Command-line options used by C code.
* queue.h::                     A double-ended queue of strings.
* socket.h::                    Basic socket operations.
* timeval.h::                   Utility functions for struct timeval.
@end menu

@include arg_parse.h.texi
@include buffer.h.texi
@include descriptor.h.texi
@include io.h.texi
@include log.h.texi
@include lua_api.h.texi
@include lua_args.h.texi
@include lua_descriptor.h.texi
@include lua_log.h.texi
@include lua_zmq.h.texi
@include options.h.texi
@include queue.h.texi
@include socket.h.texi
@include timeval.h.texi

@bye
