@node mud.descriptor
@section mud.descriptor

The @code{mud.descriptor} table holds the primitives for socket
operations. Each client gets its own lua thread, and can block until
input is available. Descriptors are referred to by their file descriptor
number.

@defun mud.descriptor.close (@var{fd})
Put a descriptor into the @emph{draining} state; no new input can be
received and the descriptor will close after all pending output has been
sent.
@end defun

@defun mud.descriptor.on_close (@var{fd})
This callback, if defined, is called when a descriptor closes. The
descriptor won't be suitable for writing at this point, but here's a
good place to remove references to @var{fd} from your data structures.
@end defun

@defun mud.descriptor.on_open (@var{fd})
Your code needs to define this function. It is the entry point for new
threads. If you don't, clients will be dropped.
@end defun

@defun mud.descriptor.read ()
Pause this thread until the next input line is available.
@end defun

@defun mud.descriptor.send (@var{fd}, @var{str})
Send @var{str} to @var{fd}.
@end defun

@defun mud.descriptor.send_prompt (@var{fd})
This function is called whenever a descriptor needs to have a new
prompt. It is called for each FD that has had input performed or output
sent to it since its last prompt, just before the telnet IAC GA sequence
is sent. The default prompt is boring, and leaves a warning in the log.
@end defun
