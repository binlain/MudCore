@node mud.descriptor
@section mud.descriptor

The @code{mud.descriptor} table holds the primitives for socket
operations. Each client gets its own lua thread, and can block until
input is available. Descriptors are exposed as a Lua userdatum with type
@code{mudcore.descriptor}.

@defun mud.descriptor.on_close (@var{descriptor})
This callback, if defined, is called when a descriptor closes. The
descriptor won't be suitable for writing at this point, but here's a
good place to remove references to @var{descriptor} from your data
structures.
@end defun

@defun mud.descriptor.on_open (@var{descriptor})
Your code needs to define this function. It is the entry point for new
threads. If you don't, clients will be dropped.
@end defun

@defun mud.descriptor.read ()
@defunx mud.descriptor.read (@var{delay})
Pause this thread until the next input line is available. If called with
the optional @var{delay} parameter, the next command won't be read until
@var{delay} seconds have passed.
@end defun

@defivar mudcore.descriptor prompt
Each descriptor has an independent callback for sending a prompt. This
is either a string or a function of one argument, the descriptor. The
server ensures that any output sent starts on a fresh line, and you
shouldn't write a newline after you're finished sending.
@end defivar

@defmethod mudcore.descriptor close ()
Put a descriptor into the @emph{draining} state; no new input can be
received and the descriptor will close after all pending output has been
sent.
@end defmethod

@defmethod mudcore.descriptor send (@var{str})
Send @var{str} to the descriptor.
@end defmethod

@defmethod mudcore.descriptor will_echo (@var{will})
Manipulate the telnet ECHO option. Turning the option on means that the
server is responsible for echoing input. Turning it on but echoing
nothing is common when accepting password input.
@end defmethod
